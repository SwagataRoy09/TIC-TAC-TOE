package SpecialSmallProjects;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
public class TicTacToe {
    static int[] arr = new int[9];
    static char compsign;
    static char s;

        public static void main(String[] array) throws InputMismatchException {
        Scanner sc = new Scanner(System.in);
        Arrays.fill(arr, 0);

        System.out.println("[0][0]->0 ||[0][1]->1 ||[0][2]->2");
        System.out.println("[1][0]->3 ||[1][1]->4 ||[1][2]->5");
        System.out.println("[2][0]->6 ||[2][1]->7 ||[2][2]->8");

        char board[][] = {{' ',' ',' '},
                          {' ',' ',' '},
                          {' ',' ',' '}};
        boardDisplay(board);
        System.out.println(" CHOOSE X OR O FOR YOURSELF ");
        char c = sc.next().charAt(0);
        if (c == 'X' || c == 'x') {
            compsign = 'O';
        } else {
            compsign = 'X';
        }


        while (true) {
            System.out.println(" ENTER POSITION WHERE YOU WANT TO INSERT " + c);
            int position = sc.nextInt();
            if (checker(arr, position) && position <=8) {
                placing(board, position, c);
                arr[position] = 1;
                computerPlay(board, compsign);
                boardDisplay(board);
                if (endGame(board,c)){
                    break;
                }
            } else {
                System.out.println(" PLACE OCCUPIED ");
            }

        }

    }

    public static void boardDisplay(char board[][]) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.printf(" %c |", board[i][j]);
            }
            System.out.print("\b");
            System.out.println();
            if (i != 2) {
                System.out.println(" _ + _ + _  ");
            }
        }
    }

    public static void placing(char[][] board, int position, char c) {
        try {
            if (position > 9 && position <= 0) {
                System.out.println(" PLEASE ENTER THE POSITION FROM 0 TO 9 ");
            }
        } catch (InputMismatchException e) {
            System.out.println(" PLEASE ENTER THE POSITION FROM 1 TO 9 ");
        }
        switch (position) {
            case 0 -> board[0][0] = c;
            case 1 -> board[0][1] = c;
            case 2 -> board[0][2] = c;
            case 3 -> board[1][0] = c;
            case 4 -> board[1][1] = c;
            case 5 -> board[1][2] = c;
            case 6 -> board[2][0] = c;
            case 7 -> board[2][1] = c;
            case 8 -> board[2][2] = c;
        }
    }

    public static boolean checker(int arr[], int position) {
        if (arr[position] == 0) {
            return true;
        }
        return false;
    }

    public static void computerPlay(char[][] board, char compsign) {
        while (true) {
            Random random = new Random();
            int pos = random.nextInt(8)+1;
            if (checker(arr, pos)) {
                arr[pos] = 2;
                placing(board, pos, compsign);
                break;
            }
        }
    }

    /*0 1 2
      3 4 5
      6 7 8*/

    public static boolean winCase(char arr[][])
    {
        if (arr[0][0] == arr[0][1] && arr[0][1] == arr[0][2] && arr[0][1] !=' ') {
            s = arr[0][1];
            return true;
        }
        else if (arr[1][0] == arr[1][1] && arr[1][1] == arr[1][2] && arr[1][1] !=' ') {
            s = arr[1][1];
            return true;
        }
        else if (arr[2][0] == arr[2][1] && arr[2][1] == arr[2][2] && arr[2][1] !=' ') {
            s = arr[2][1];
            return true;
        }
        else if (arr[0][0] == arr[1][0] && arr[1][0] == arr[2][0] && arr[0][0] !=' ') {
            s = arr[0][0];
            return true;
        }
        else if (arr[0][0] == arr[1][1] && arr[1][1] == arr[1][2] && arr[1][1] !=' ') {
            s = arr[1][1];
            return true;
        }

        else if (arr[0][2] == arr[1][2] && arr[1][2] == arr[2][2] && arr[1][2] !=' ') {
            s = arr[1][2];
            return true;
        }
        else if (arr[0][0] == arr[1][1] && arr[1][1] == arr[2][2] && arr[1][1] !=' ') {
            s = arr[1][1];
            return true;
        }
        else if (arr[0][2] == arr[1][1] && arr[1][1] == arr[2][0] && arr[1][1] !=' ') {
            s = arr[1][1];
            return true;
        }

        else {
            return false;
        }
    }

    public static boolean endGame(char[][] board,char c){
        if (winCase(board) && s==c){
            System.out.println(" USER WINS CONGRATS ");
            return true;
        }
         if (winCase(board)){
            System.out.println(" SORRY! COMPUTER WINS TRY AGAIN ");
            return true;
        }
        for (int i=0;i<board.length;i++){
            for (int j=0;j<board[i].length;j++){
                if (board[i][j]==' '){
                    return false;
                }
            }
        }
        System.out.println(" ITS A TIE ");
        return true;
    }
}
